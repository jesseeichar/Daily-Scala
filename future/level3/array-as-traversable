<code>
scala> def x(t:Traversable[Int]) = t match {
     | case x : Array[Int] => true          
     | }
<console>:13: error: pattern type is incompatible with expected type;
 found   : Array[Int]
 required: Traversable[Int]
       case x : Array[Int] => true
                ^
<console>:13: error: type mismatch;
 found   : Array[Int]
 required: Traversable[Int]
       case x : Array[Int] => true
              ^
</code>

<code>
scala> def x(t:Traversable[Int]) = t.isInstanceOf[Array[_]]
x: (t: Traversable[Int])Boolean

scala> x(Array(1,2,3))                                     
res24: Boolean = false
</code>

<code>
scala> def x(t:Traversable[Int]) = println(t)
x: (t: Traversable[Int])Unit

scala> x(Array(1,2,3))                                            
WrappedArray(1, 2, 3)
</code>

<code>
scala> def x[T <% Traversable[Int]](t:T) = t match { 
     | case x : Array[Int] => true                                
     | }
x: [T](t: T)(implicit evidence$1: (T) => Traversable[Int])Boolean

scala> x(Array(1,2,3))                               
res27: Boolean = true
</code>