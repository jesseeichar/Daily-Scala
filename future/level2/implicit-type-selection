abstract class Monoid[T] { 
  def add(x: T, y: T): T 
  def unit: T
}

object Monoids { 
  implicit object stringMonoid extends Monoid[String] {
    def add(x: String, y: String): String = x.concat(y) 
    def unit: String = ""
  }

  implicit object intMonoid extends Monoid[Int] {
    def add(x: Int, y: Int): Int = x + y 
    def unit: Int = 0
  }
}

def sum[T](xs: List[T])(implicit m: Monoid[T]): T = 
  if(xs.isEmpty) m.unit 
  else m.add(xs.head, sum(xs.tail))