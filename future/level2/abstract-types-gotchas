In a previous post about abstract types I showed one of the benefits of using abstract types over parameterized types.  This topic looks at potential pitfalls you can encounter when using abstract types.

Error 1:
Inner class contains abstract type

Error 2: 
abstract type escapes super class

Error 3:

// not complete ....  missing abstract type  I think source must be within another class with the type info...
protected[resource] trait TraversableSource[In, A] {
  def resource : Resource[In]
  def skip(stream:In, count:Long) : Unit
  def read(stream:In) : Option[Traversable[A]]
}

protected[resource] class InputStreamSource[A](val resource : Resource[InputStream], conv : Int => Traversable[A])
    extends TraversableSource[InputStream, A] {
      def skip(stream:InputStream, count:Long) = stream.skip(count)
      def read(stream:InputStream) = stream.read match {
        case -1 => None
        case i => Some(conv(i))
      }
}

Error 4:
 Concrete type has the type information included:
 
 var foreach = fromStream(new ByteArrayInputStream(bytes))
 foreach = fromReader(new StringReader(data))  // fails to compile
