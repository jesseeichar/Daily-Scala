Iterator and Iterable have most of the most useful methods when dealing with collections.  Fold, Map, Filter are probably the most common.  But other very useful methods include grouped/groupBy, sliding, find, forall, foreach, and many more.  I want to cover Iterable's groupBy method in this topic.

This is a Scala 2.8 and later method.  It is similar to partition in that it allows the collection to be divided (or partitioned).  Partition takes a method with returns a boolean and partitions the collection into two depending on a result.  GroupBy takes a function that returns an object and returns a Map with the key being the return value.  This allows an arbitrary number of partitions to be made from the collection.

Here is the method signature:
<code>
def groupBy[K](f : (A) =&gt; K) : Map[K, This]
</code>

Examples:
<code>
scala> val groups = (1 to 20).toList groupBy {
     | case i if(i&lt;5) =&gt; "g1"
     | case i if(i&lt;10) =&gt; "g2"
     | case i if(i&lt;15) =&gt; "g3"
     | case _ =&gt; "g4"
     | }
res4: scala.collection.Map[java.lang.String,List[Int]] = Map(g1 -&gt; List(1, 2, 3, 4), g2 -&gt; List(5, 6, 7, 8, 9), g3 -&gt; List(10, 11, 12, 13, 14), g4 -&gt; List(15, 16, 17, 18, 19, 20))

scala> groups.keySet
res6: scala.collection.Set[java.lang.String] = Set(g1, g2, g3, g4)

scala> groups("g1")
res7: List[Int] = List(1, 2, 3, 4)

scala> val mods = (1 to 20).toList groupBy ( _ % 4 )
mods: scala.collection.Map[Int,List[Int]] = Map(1 -&gt; List(1, 5, 9, 13, 17), 2 -&gt; List(2, 6, 10, 14, 18), 3 -&gt; List(3, 7,
 11, 15, 19), 0 -&gt; List(4, 8, 12, 16, 20))

scala> mods.keySet
res9: scala.collection.Set[Int] = Set(1, 2, 3, 0)

scala> mods(1)
res11: List[Int] = List(1, 5, 9, 13, 17)
</code>
